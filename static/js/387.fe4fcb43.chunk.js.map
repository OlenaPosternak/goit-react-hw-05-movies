{"version":3,"file":"static/js/387.fe4fcb43.chunk.js","mappings":"mQAEaA,EAAYC,EAAAA,EAAAA,IAAH,8HAQTC,EAAQD,EAAAA,EAAAA,GAAH,gN,SC0ClB,EA1Ca,SAAC,GAAc,EAAZE,MAAa,IACnBC,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAgCE,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KAaA,OAXAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8EACE,KACEC,EAAAA,EAAAA,IAAYN,GAAIO,MAAK,SAAAC,GAAI,OAAIJ,EAAYI,EAAKC,KAArB,GAG1B,CAFC,MAAOC,GACPC,QAAQC,IAAIF,EACb,CALH,4CADc,uBAAC,WAAD,wBAQdG,EACD,GAAE,CAACV,EAAUH,KAGZ,SAACJ,EAAD,UACGO,EAASW,OAAS,EACfX,EAASY,KAAI,gBAAGf,EAAH,EAAGA,GAAIgB,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,UAApC,OACX,UAACpB,EAAD,YACE,gBACEqB,IACEH,EAAY,0CAC2BA,GAD3B,UAxBrB,wEA4BOI,IAAKH,EACLI,MAAM,WAER,uBAAIJ,KACJ,uCAAeC,OAXLlB,EADD,IADhB,+EAmBN,C,mMC5CKsB,EAAU,mCAKT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6GAEoBC,EAAAA,GAAAA,IAAA,qCAAwCF,IAF5D,cAEGG,EAFH,yBAGIA,EAASjB,MAHb,gCAKH,IAAIkB,MAAM,aALP,gFASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAmCC,GAAnC,gGAEoBJ,EAAAA,GAAAA,IAAA,+BACGF,EADH,iCACmCM,EADnC,gCAFpB,cAEGH,EAFH,yBAKIA,EAASjB,MALb,gCAOH,IAAIkB,MAAM,aAPP,gFAWA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA4B7B,GAA5B,gGAEoBwB,EAAAA,GAAAA,IAAA,gBACZxB,EADY,oBACEsB,EADF,oBAFpB,cAEGG,EAFH,yBAKIA,EAASjB,MALb,gCAOH,IAAIkB,MAAM,aAPP,gFAWA,SAAepB,EAAtB,+CAAO,OAAP,oBAAO,WAA2BN,GAA3B,gGAEoBwB,EAAAA,GAAAA,IAAA,gBACZxB,EADY,4BACUsB,EADV,oBAFpB,cAEGG,EAFH,yBAKIA,EAASjB,MALb,gCAOH,IAAIkB,MAAM,aAPP,gFAWA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA8B9B,GAA9B,gGAEoBwB,EAAAA,GAAAA,IAAA,gBACZxB,EADY,4BACUsB,EADV,2BAFpB,cAEGG,EAFH,yBAKIA,EAASjB,MALb,gCAOH,IAAIkB,MAAM,aAPP,gFA9CPF,EAAAA,GAAAA,SAAAA,QAAyB,8B","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","fetchAPI.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  padding-top: 15px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n  justify-content: center;\n`;\n\nexport const Actor = styled.li`\n  width: 250px;\n  text-align: center;\n  list-style: none;\n  border: 1px solid #212121;\n  border-radius: 5px;\n  padding-top: 10px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n`;\n","import PropTypes from 'prop-types';\n\nimport { useState, useEffect } from 'react';\nimport { getCastByID } from '../../fetchAPI';\nimport { useParams } from 'react-router-dom';\n\nimport { Container, Actor } from './Cast.styled';\n\nconst IMG = `https://cdn.pixabay.com/photo/2021/12/29/17/34/girl-6902365_1280.png`;\n\nconst Cast = ({ state }) => {\n  const { id } = useParams();\n  const [castInfo, setCastInfo] = useState([]);\n\n  useEffect(() => {\n    async function getCast() {\n      try {\n        getCastByID(id).then(data => setCastInfo(data.cast));\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getCast();\n  }, [castInfo, id]);\n\n  return (\n    <Container>\n      {castInfo.length > 0\n        ? castInfo.map(({ id, profile_path, original_name, character }) => (\n            <Actor key={id}>\n              <img\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                    : `${IMG}`\n                }\n                alt={original_name}\n                width=\"100px\"\n              />\n              <p>{original_name}</p>\n              <p>Character: {character}</p>\n            </Actor>\n          ))\n        : `Sorry! There is no Info about the cast here at this moment. try again Later`}\n    </Container>\n  );\n};\n\nCast.propTypes = {\n  state: PropTypes.object,\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = '457f80f59e5c5ed289022502f172a9f5';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\n// Робота с backend\n\nexport async function fetchTrending() {\n  try {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return response.data;\n  } catch (error) {\n    new Error('Not Found');\n  }\n}\n\nexport async function fetchFilteredMovies(query) {\n  try {\n    const response = await axios.get(\n      `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n    return response.data;\n  } catch (error) {\n    new Error('Not Found');\n  }\n}\n\nexport async function getMovieByID(id) {\n  try {\n    const response = await axios.get(\n      `movie/${id}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    new Error('Not Found');\n  }\n}\n\nexport async function getCastByID(id) {\n  try {\n    const response = await axios.get(\n      `movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    new Error('Not Found');\n  }\n}\n\nexport async function getReviewsByID(id) {\n  try {\n    const response = await axios.get(\n      `movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    return response.data;\n  } catch (error) {\n    new Error('Not Found');\n  }\n}\n"],"names":["Container","styled","Actor","state","id","useParams","useState","castInfo","setCastInfo","useEffect","getCastByID","then","data","cast","error","console","log","getCast","length","map","profile_path","original_name","character","src","alt","width","API_KEY","fetchTrending","axios","response","Error","fetchFilteredMovies","query","getMovieByID","getReviewsByID"],"sourceRoot":""}