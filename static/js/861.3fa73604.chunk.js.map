{"version":3,"file":"static/js/861.3fa73604.chunk.js","mappings":"sRACaA,EAAOC,EAAAA,EAAAA,KAAH,uFAMJC,EAAQD,EAAAA,EAAAA,MAAH,wMAaLE,EAAYF,EAAAA,EAAAA,OAAH,yT,SCjBTG,EAAa,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAgB3B,OACE,UAACL,EAAD,CAAMM,OAAO,SAASC,SAhBH,SAAAC,GACnBA,EAAMC,iBAEN,IACMC,EADOF,EAAMG,cACMC,SAASC,YAAYC,MAE1C,KAAAJ,EAAYK,QAIhBV,EAASK,EAGV,EAGC,WACE,SAACR,EAAD,CAAOc,KAAK,OAAOC,KAAK,cAAcC,YAAY,iBAClD,SAACf,EAAD,uBAGL,ECtBYgB,EAAYlB,EAAAA,EAAAA,GAAH,sHAQTmB,GAAWnB,EAAAA,EAAAA,GAAOoB,EAAAA,GAAPpB,CAAH,8IASRqB,EAAWrB,EAAAA,EAAAA,GAAH,mVAmBRsB,EAAQtB,EAAAA,EAAAA,IAAH,kG,SChCLuB,EAAiB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,MAC5C,OACE,SAAC,EAAAC,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,IAApB,UACE,SAACV,EAAD,UACGM,EAAYK,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAd,OACf,SAACX,EAAD,WACE,UAACF,EAAD,CAAUc,GAAE,UAAKH,GAAML,MAAOA,EAA9B,WACE,SAACH,EAAD,CACEY,IACEF,EAAW,0CAC4BA,GAD5B,UAXpB,wEAeOG,IAAKJ,EACLK,MAAM,SAER,uBAAIL,QAXOD,EADA,OAmBxB,E,kBCiCD,G,OApDe,WAAO,IAAD,EACnB,GAA0BO,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAS,UAAGF,EAAaG,IAAI,eAApB,QAA+B,GAExCC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,GAAa,KAATJ,EAAkB,CAAC,IACNK,EADK,mCACpB,8EACE,KACEC,EAAAA,EAAAA,IAAoBN,GAAWO,MAAK,SAAAC,GACN,IAAxBA,EAAKC,QAAQC,QACfC,EAAAA,GAAAA,KAAW,iCAAkC,CAC3CC,MAAO,SAGXhB,EAASY,EAAKC,QACf,GAGF,CAFC,MAAOI,GACPC,QAAQC,IAAIF,EACb,CAZH,2CADoB,qDAepBR,GACD,CACF,GAAE,CAACL,IAWJ,OACE,+BACE,UAAC,EAAAjB,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,IAApB,WACE,SAACzB,EAAD,CAAYC,SAZK,SAAAY,GACjBA,IAAS2B,GACXJ,EAAS,IAIXG,EAD4B,KAAT1B,EAAc,CAAEA,KAAAA,GAAS,CAAC,EAE9C,KAMK,SAAC,KAAD,CAAMS,MAAO,CAAEkC,KAAK,WAAD,OAAalB,IAAhC,UACE,SAAClB,EAAD,CAAgBC,YAAac,EAAOb,MAAO,CAAEkC,KAAMd,QAErD,SAAC,KAAD,CAAgBe,UAAW,IAAMC,cAAY,QAIpD,E","sources":["components/SerchForm/Search.styled.js","components/SerchForm/Search.jsx","components/SearchedMovies/SearchedMovies.styled.js","components/SearchedMovies/SearchedMovies.jsx","pages/Movies.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nexport const Form = styled.form`\n  margin: 20px;\n  display: flex;\n  justify-content: center;\n`;\n\nexport const Input = styled.input`\n  margin-right: 5px;\n  outline: none;\n  width: 200px;\n  height: 35px;\n\n  :not(:placeholder-shown) {\n    line-height: 1.25;\n    color: black;\n    font-size: 20px;\n  }\n`;\n\nexport const SearchBtn = styled.button`\n  height: 40px;\n  width: 100px;\n  font-size: 20px;\n  display: inline-block;\n  padding: 5px;\n  border-radius: 4px;\n  outline: none;\n  border: none;\n  background-color: teal;\n  color: white;\n\n  :hover,\n  :focus {\n    background-color: darkslategray;\n    cursor: pointer;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Form, Input, SearchBtn } from './Search.styled';\n\nexport const SearchForm = ({ onSearch }) => {\n  const handelSubmit = event => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n    const searchValue = form.elements.searchMovie.value;\n\n    if (searchValue.trim() === ``) {\n      return;\n    }\n\n    onSearch(searchValue);\n\n    // form.reset();  - використати, якщо необхідно очистити інпут\n  };\n\n  return (\n    <Form action=\"submit\" onSubmit={handelSubmit}>\n      <Input type=\"text\" name=\"searchMovie\" placeholder=\"Search film\" />\n      <SearchBtn>Search</SearchBtn>\n    </Form>\n  );\n};\n\nSearchForm.propTypes = {\n  onSearch: PropTypes.func,\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const Container = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  margin: 0;\n  justify-content: center;\n`;\n\nexport const FilmLink = styled(Link)`\n  text-decoration: none;\n  font-size: 24px;\n  display: inline-block;\n  color: black;\n  margin: 0;\n  padding: 0;\n`;\n\nexport const FilmItem = styled.li`\n  margin: 0;\n  padding: 0;\n  width: 350px;\n  text-align: center;\n  list-style: none;\n  border: 1px solid #212121;\n  border-radius: 5px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  list-style: none;\n\n  :hover,\n  :focus {\n    background-color: teal;\n    color: white;\n    border-radius: 4px;\n  }\n`;\n\nexport const Image = styled.img`\n  width: 350px;\n  height: 525px;\n  display: block;\n  max-width: 100%;\n`;\n","import PropTypes from 'prop-types';\nimport { Suspense } from 'react';\nimport { FilmLink, FilmItem, Image, Container } from './SearchedMovies.styled';\nimport { Loader } from 'components/Loader';\n\nconst IMG = `https://cdn.pixabay.com/photo/2021/12/29/17/34/girl-6902365_1280.png`;\n\nexport const SearchedMovies = ({ listOFfilms, state }) => {\n  return (\n    <Suspense fallback={<Loader />}>\n      <Container>\n        {listOFfilms.map(({ id, title, poster_path }) => (\n          <FilmItem key={id}>\n            <FilmLink to={`${id}`} state={state}>\n              <Image\n                src={\n                  poster_path\n                    ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                    : `${IMG}`\n                }\n                alt={title}\n                width=\"200\"\n              />\n              <p>{title}</p>\n            </FilmLink>\n          </FilmItem>\n        ))}\n      </Container>\n    </Suspense>\n  );\n};\n\nSearchedMovies.propTypes = {\n  listOFfilms: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n    })\n  ),\n  state: PropTypes.object,\n};\n","import { Suspense, useState, useEffect } from 'react';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\n\nimport { SearchForm } from '../components/SerchForm/Search';\nimport { SearchedMovies } from '../components/SearchedMovies/SearchedMovies';\nimport { fetchFilteredMovies } from '../fetchAPI';\nimport { Loader } from '../components/Loader';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst Movies = () => {\n  const [films, setFilms] = useState([]);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('name') ?? '';\n\n  const location = useLocation();\n\n  useEffect(() => {\n    if (movieName !== ``) {\n      async function filterMovies() {\n        try {\n          fetchFilteredMovies(movieName).then(data => {\n            if (data.results.length === 0) {\n              toast.warn('Please try another movie name!', {\n                theme: 'dark',\n              });\n            }\n            setFilms(data.results);\n          });\n        } catch (error) {\n          console.log(error);\n        }\n      }\n      filterMovies();\n    }\n  }, [movieName]);\n\n  const onSubmitSerach = name => {\n    if (name !== movieName) {\n      setFilms([]);\n    }\n\n    const nextParams = name !== '' ? { name } : {};\n    setSearchParams(nextParams);\n  };\n\n  return (\n    <>\n      <Suspense fallback={<Loader />}>\n        <SearchForm onSearch={onSubmitSerach} />\n        <Link state={{ from: `/movies/${searchParams}` }}>\n          <SearchedMovies listOFfilms={films} state={{ from: location }} />\n        </Link>\n        <ToastContainer autoClose={3000} closeOnClick />\n      </Suspense>\n    </>\n  );\n};\n\n\n\nexport default Movies;\n"],"names":["Form","styled","Input","SearchBtn","SearchForm","onSearch","action","onSubmit","event","preventDefault","searchValue","currentTarget","elements","searchMovie","value","trim","type","name","placeholder","Container","FilmLink","Link","FilmItem","Image","SearchedMovies","listOFfilms","state","Suspense","fallback","Loader","map","id","title","poster_path","to","src","alt","width","useState","films","setFilms","useSearchParams","searchParams","setSearchParams","movieName","get","location","useLocation","useEffect","filterMovies","fetchFilteredMovies","then","data","results","length","toast","theme","error","console","log","from","autoClose","closeOnClick"],"sourceRoot":""}